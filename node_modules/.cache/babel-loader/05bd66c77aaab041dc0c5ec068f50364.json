{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexandra.brown\\\\Downloads\\\\01-starting-setup\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport \"./ExpenseForm.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // All these three states are related to the form. It is the same concept repeated three times\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n  // Instead, you can go for one state instead of 3. You do this by passing in UseState only once and passing in an object as a value\n  // In this object, you can group together your states\n  // The difference now is that whenever you update the state, you need to update all 3 properties \n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\"\n  }); // Now in the handlers, you want to pass in a new object where you set the entered value to event.target.value BUT you also need to ensure the other properties are not getting lost\n  // You can do this by using the sprea operator to copy over the other values into your object and then you're just overriding 'enteredTitle'\n  // However! There is a problem - here, we are depending on our previous state for updating the state.\n  // const titleChangeHandler = (event) => {\n  //   setUserInput({\n  //     ...userInput,\n  //     enteredTitle: event.target.value,\n  //   });\n  // };\n  // RULE: Whenever you update state and it depends on the previous state, instead of calling it like you have above, you should pass in a function to the ss\n\n  const titleChangeHandler = event => {\n    setUserInput(() => {});\n  };\n\n  const amountChangeHandler = event => {\n    setUserInput({ ...userInput,\n      enteredAmount: event.target.value\n    });\n  };\n\n  const dateChangeHandler = event => {\n    setUserInput({ ...userInput,\n      enteredDate: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"fOKiQJ0uFtiE+wpCN1+3hpMhKHE=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","amountChangeHandler","target","value","dateChangeHandler"],"sources":["C:/Users/alexandra.brown/Downloads/01-starting-setup/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import \"./ExpenseForm.css\";\nimport { useState } from \"react\";\n\nconst ExpenseForm = () => {\n  // All these three states are related to the form. It is the same concept repeated three times\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Instead, you can go for one state instead of 3. You do this by passing in UseState only once and passing in an object as a value\n  // In this object, you can group together your states\n  // The difference now is that whenever you update the state, you need to update all 3 properties \n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\",\n  });\n\n  // Now in the handlers, you want to pass in a new object where you set the entered value to event.target.value BUT you also need to ensure the other properties are not getting lost\n  // You can do this by using the sprea operator to copy over the other values into your object and then you're just overriding 'enteredTitle'\n  // However! There is a problem - here, we are depending on our previous state for updating the state.\n  // const titleChangeHandler = (event) => {\n  //   setUserInput({\n  //     ...userInput,\n  //     enteredTitle: event.target.value,\n  //   });\n  // };\n  \n  // RULE: Whenever you update state and it depends on the previous state, instead of calling it like you have above, you should pass in a function to the ss\n\n  const titleChangeHandler = (event) => {\n    setUserInput(() => { });\n  }\n\n  const amountChangeHandler = (event) => {\n    setUserInput({\n      ...userInput,\n      enteredAmount: event.target.value,\n    });\n  };\n\n  const dateChangeHandler = (event) => {\n    setUserInput({\n      ...userInput,\n      enteredDate: event.target.value,\n    });\n  };\n\n  return (\n    <form>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={titleChangeHandler} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;IACzCI,YAAY,EAAE,EAD2B;IAEzCC,aAAa,EAAE,EAF0B;IAGzCC,WAAW,EAAE;EAH4B,CAAD,CAA1C,CATwB,CAexB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;IACpCL,YAAY,CAAC,MAAM,CAAG,CAAV,CAAZ;EACD,CAFD;;EAIA,MAAMM,mBAAmB,GAAID,KAAD,IAAW;IACrCL,YAAY,CAAC,EACX,GAAGD,SADQ;MAEXG,aAAa,EAAEG,KAAK,CAACE,MAAN,CAAaC;IAFjB,CAAD,CAAZ;EAID,CALD;;EAOA,MAAMC,iBAAiB,GAAIJ,KAAD,IAAW;IACnCL,YAAY,CAAC,EACX,GAAGD,SADQ;MAEXI,WAAW,EAAEE,KAAK,CAACE,MAAN,CAAaC;IAFf,CAAD,CAAZ;EAID,CALD;;EAOA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEJ;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAKE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,QADP;UAEE,GAAG,EAAC,MAFN;UAGE,IAAI,EAAC,MAHP;UAIE,QAAQ,EAAEE;QAJZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QALF,eAcE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,GAAG,EAAC,YAFN;UAGE,GAAG,EAAC,YAHN;UAIE,QAAQ,EAAEG;QAJZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAdF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAyBE;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAzBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD,CA5ED;;GAAMX,W;;KAAAA,W;AA8EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}